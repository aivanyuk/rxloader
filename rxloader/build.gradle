buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'


targetCompatibility=JavaVersion.VERSION_1_6
sourceCompatibility=JavaVersion.VERSION_1_6

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compile 'com.netflix.rxjava:rxjava-core:0.19.6'
    compile 'com.netflix.rxjava:rxjava-android:0.19.6'
    provided 'android:android:4.4.2_r3'
    provided 'android.support:compatibility-v4:20.0.0'
}

def groupId = 'me.tatarka.rxloader'
def artifactId = 'rxloader'
version = new Version(currentVersion)
status = version.status

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "https://api.bintray.com/maven/aivanyuk/rxloader/rxloader") {
                    authentication(userName: bintrayUser, password: bintrayKey)
                }
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            name 'Artyom Ivanyuk'
                            email 'ivanyuk.artyom@gmail.com'
                            url 'https://github.com/aivanuk'
                            roles {
                                role 'admin'
                                role 'developer'
                            }
                            timezone '+4'
                        }
                        developer {
                            id 'evant'
                            name 'Evan Tatarka'
                        }
                    }
                }
                pom.version = version
                pom.groupId = groupId
                pom.artifactId = artifactId
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives androidSourcesJar
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

import java.text.SimpleDateFormat

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime
    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }
    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }
    String toString() {
        thisVersion
    }
}