buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.6'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compile 'com.netflix.rxjava:rxjava-core:0.19.6'
    compile 'com.netflix.rxjava:rxjava-android:0.19.6'
    provided 'android:android:4.4.2_r3'
    provided 'android.support:compatibility-v4:20.0.0'
}

group = 'me.tatarka.rxloader'
version = new Version(currentVersion)
status = version.status

ext.publish = true

configurations {
    published
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    published jar
    published javadocJar
    published sourcesJar
}

bintray {
    apiUrl = bintrayApiUrl
    user = bintrayUser
    key = bintrayKey

    configurations = ['published', 'archives']

    dryRun = false //Whether to run this as dry-run, without deploying
    publish = false //If version should be auto published after an upload
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = 'Handles the activity lifecyle for rxjava\'s Observable'
        websiteUrl = 'https://github.com/aivanyuk/rxloader'
        issueTrackerUrl = 'https://github.com/aivanyuk/rxloader/issues'
        vcsUrl = 'https://github.com/aivanyuk/rxloader.git'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

import java.text.SimpleDateFormat

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime
    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }
    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }
    String toString() {
        thisVersion
    }
}